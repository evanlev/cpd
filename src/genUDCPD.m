% genUDCPD.m - 
% Generate uniform density complementary poisson-disc
% or Poisson DISCO sampling
% Usage:
% M = genUDCPD(numMasks, alpha, feasiblePoints, shapeOpt, verbose, C, mindist_scaling) 
%  INPUTS:
%   numMasks       = # regions (segments) over which to distribute samples
%   alpha          = anisotropy factor FOVz / FOVy
%   feasiblePoints = [ny nz] matrix of feasible points,
%                    feasiblePoints(i,j) = 1 if (i,j) sample
%                    should be in one traj of M, 0 otherwise
%                    this will be sum(M,3)
%   shapeOpt       = min. dist. criterion, shape generated by a sample
%                    'cross': union of a line through time axis and ellipse in k-space
%                    'l1 ball': weighted l1 ball
%                    'ellipsoid': ellipsoid
%                    'cones': two opposing cones pointing on the time axis
%                    Recommended: cones
%   verbose        = 1 to show some output
%   C              = dt_min / dky_min parameter to balance min distance in time and 
%                    ky
%                    Recommended: 1
%   mindist_scaling= scaling for min distance
%                    Recommended: 0 for random, 1 for poisson-disc, or between 0 and 1
%  OUTPUTS:
%   M              = [ny nz nt] sampling pattern. sum(M,3)
%                    should be equal to feasiblePoints
% Evan Levine
% egl@stanford.edu
% Stanford University
function M = genUDCPD(numMasks, alph, feasiblePoints, shapeOpt, verbose, C, mindist_scaling)
    if nargin < 7
        mindist_scaling = 1;
    end
    if nargin < 6
        C = 1;
    end
    if nargin < 5
        verbose = 1;
    end
    if strcmp(shapeOpt, 'cross')
        shapeOpt = 0;
    elseif strcmp(shapeOpt, 'l1 ball')
        shapeOpt = 1;
    elseif strcmp(shapeOpt, 'ellipsoid')
        shapeOpt = 2;
    elseif strcmp(shapeOpt, 'cones')
        shapeOpt = 3;
    else
        error(['Please provide a min. distance shape: ''cross'', ''ellipsoid'', ''l1 ball'', or ''cones''']);
    end

    M = genUDCPDMex(numMasks, alph, double(feasiblePoints), shapeOpt, verbose, C, mindist_scaling);
    M = double(M);
end


